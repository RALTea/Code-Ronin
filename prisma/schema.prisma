  // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Apprentice {
  id          String   @id @default(uuid())
  giteaUserId Int?
  username    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  email          String @unique
  role           String @default("USER")
  title          String @default("Newbie")
  profilePicture String

  attempts  Attempt[]
  campaigns Campaign[]
}

model Campaign {
  id   String @id @default(uuid())
  name String

  forceOpen Boolean?
  openAt    DateTime?
  closeAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  apprentices Apprentice[]
  quests      Quest[]
}

model Quest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name   String
  resume String

  forceOpen Boolean?
  openAt    DateTime?
  closeAt   DateTime?

  nextQuests     Quest[] @relation("Quests")
  previousQuests Quest[] @relation("Quests")

  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String

  tasks Task[]
}

model Task {
  id           String  @id @default(uuid())
  name         String
  instructions String
  order        Int
  exp          Int     @default(1)
  answerType   String // "tests" | "stdout" | "stderr"
  isMiniboss   Boolean @default(false)

  nextTasks     Task[] @relation("Tasks")
  previousTasks Task[] @relation("Tasks")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quest   Quest  @relation(fields: [questId], references: [id])
  questId String

  attempts    Attempt[]
  validations Validation[]
}

model Attempt {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  userSolution String
  isSuccess    Boolean

  apprenticeId String
  apprentice   Apprentice @relation(fields: [apprenticeId], references: [id], onDelete: Cascade)

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Validation {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  testFileUrl    String?
  expectedStdout String?
  expectedStderr String?

  snippets Snippet[]

  taskId String
  task   Task   @relation(fields: [taskId], references: [id])
}

model Snippet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  type      String // "FORBIDDEN" | "REQUIRED"

  validationId String
  validation   Validation @relation(fields: [validationId], references: [id])
}
